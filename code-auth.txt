

================= FILE: pages/login.vue =================

// pages/login.vue - V1.2 - Usa apenas o primeiro nome do usu치rio para efetuar o login, preservando o case
<template>
 <div class="min-h-screen flex flex-col">
  <header class="flex justify-between items-center p-4 shadow-md bg-white">
   <h1 class="text-xl font-bold text-gray-800">Login</h1>
  </header>

  <div class="flex flex-grow justify-center items-center p-4 bg-gray-50">
   <ClientOnly>
    <div class="w-full max-w-md form-card login-card p-8 bg-white rounded-xl shadow-2xl">
     <h2 class="text-2xl font-bold text-center mb-6 text-gray-800">Acesse sua conta</h2>
     
     <form @submit.prevent="handleLogin" class="space-y-4">
      <div>
       <label for="username" class="block text-sm font-medium text-gray-700">Nome de Usu치rio</label>
       <input
        type="text"
        id="username"
        v-model="credentials.username"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"
        required
       />
      </div>

      <div>
       <label for="password" class="block text-sm font-medium text-gray-700">Senha</label>
       <input
        type="password"
        id="password"
        v-model="credentials.password"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"
        required
       />
      </div>
      
      <div v-if="error" class="text-red-600 text-sm p-2 bg-red-100 rounded">
       {{ error }}
      </div>

      <div class="pt-4">
       <button
        type="submit"
        :disabled="isLoading"
        class="w-full py-3 bg-btn-secundario text-btn-font-secundario rounded-md font-bold hover:opacity-80 disabled:bg-btn-desativado disabled:text-btn-font-desativado transition duration-150"
       >
        {{ isLoading ? 'Entrando...' : 'Entrar' }}
       </button>
      </div>
     </form>
    </div>
    <template #fallback>
     <div class="text-center p-8">Carregando formul치rio de login...</div>
    </template>
   </ClientOnly>
  </div>
 </div>
</template>

<script setup>
import { reactive, ref } from 'vue';
import { useAuthStore } from '~/stores/auth';

definePageMeta({
 layout: false 
});

const authStore = useAuthStore();
const credentials = reactive({
 username: '',
 password: ''
});
const isLoading = ref(false);
const error = ref(null);

const handleLogin = async () => {
 error.value = null;
 isLoading.value = true;

 try {
    // 1. Obt칠m o valor completo do campo (ex: 'Patricia Santos')
    const fullName = credentials.username.trim(); 
    
    // 2. Extrai APENAS o primeiro nome, preservando o case e a acentua칞칚o.
    // Ex: 'Patricia Santos' -> 'Patricia'
    const firstName = fullName.split(' ')[0];

    // 3. Cria o payload de login com o primeiro nome extra칤do
    const loginPayloadToSend = {
        username: firstName,
        password: credentials.password
    };

  const apiResponse = await $fetch('/api/auth', { 
   method: 'POST', 
   body: loginPayloadToSend, // 游뚿 CORRE칂츾O APLICADA: Usa o payload com apenas o primeiro nome
   headers: { 'Content-Type': 'application/json' }
  });

  // Mapeia os campos necess치rios da resposta da API
  const userPayload = {
   userId: apiResponse.userId,
   username: apiResponse.username,
   apelido: apiResponse.apelido || apiResponse.username,
   heightCm: apiResponse.heightCm, 
   initialWeight: apiResponse.initialWeight || 90.0,
   email: apiResponse.email || '', 
   role: apiResponse.role || 'user', 
   photo_perfil_url: apiResponse.photo_perfil_url || '' 
  };
  
  const authPayload = {
   token: apiResponse.token, 
   user: userPayload
  };

  if (userPayload.userId) {
   authStore.login(authPayload); 
   await navigateTo('/', { replace: true });
  } else {
   throw new Error('Resposta de login inv치lida do servidor.');
  }

 } catch (e) {
  const status = e.response?.status;
  const message = e.response?._data?.message;

  if (status === 401 || status === 403) {
   error.value = message || 'Nome de usu치rio ou senha incorretos.';
  } else {
   error.value = 'Falha na comunica칞칚o com o servidor. Verifique se o backend est치 online.';
  }
 } finally {
  isLoading.value = false;
 }
};
</script>

<style scoped>
.form-card {
 box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}
</style>

================= FILE: stores/auth.ts =================

// ~/stores/auth.ts - V1.2 - Adi칞칚o de role e getter isAdmin para menu de admin
import { defineStore } from 'pinia';
import { ref, computed } from 'vue'; // 游녣 Importa칞칚o do computed adicionada

// Defini칞칚o de Tipagem para o Objeto de Usu치rio
interface User {
  userId: number;
  username: string;
  apelido: string | null;
  email: string;
  initialWeight: number;
  heightCm: number;
  photo_perfil_url?: string;
  role?: string; // 游녣 Adicionado o campo role
}

export const useAuthStore = defineStore('auth', () => {
  // Estado
  const user = ref<User | null>(null);
  const token = ref<string | null>(null);
  const isAuthenticated = ref(false);

  // Getters
  // 游뚿 NOVO GETTER: Verifica se o usu치rio 칠 admin de forma robusta
  const isAdmin = computed(() => {
    // Retorna true se a role existir e for estritamente igual a 'admin' (em min칰sculas)
    return user.value?.role?.toLowerCase() === 'admin'; 
  });

  // A칞칚o de Login
  // A tipagem de 'data' deve refletir o que vem da API, incluindo o role
  const login = (data: { token?: string, user: User & { role: string } }) => {
    token.value = data.token || null;
    user.value = { 
        ...data.user,
        // Garante que a role esteja sempre presente (o banco pode n칚o ter enviado)
        role: data.user.role || 'user' 
    };
    isAuthenticated.value = true;
    
    if (process.client) {
      if (data.token) localStorage.setItem('authToken', data.token);
      localStorage.setItem('authUser', JSON.stringify(user.value));
    }
  };

  // A칞칚o de Logout
  const logout = () => {
    token.value = null;
    user.value = null;
    isAuthenticated.value = false;
    
    if (process.client) {
      localStorage.removeItem('authToken');
      localStorage.removeItem('authUser');
    }
  };

  // A칞칚o de Inicializa칞칚o
  const init = () => {
    if (process.client) {
      const savedToken = localStorage.getItem('authToken');
      const savedUser = localStorage.getItem('authUser');

      if (savedToken && savedUser) {
        token.value = savedToken;
        try {
          const parsedUser = JSON.parse(savedUser);
          // 游뚿 Garante que a role exista ao carregar do storage
          user.value = { ...parsedUser, role: parsedUser.role || 'user' } as User;
          isAuthenticated.value = true;
        } catch (e) {
          console.error("Erro ao fazer parse dos dados de usu치rio salvos:", e);
          logout();
        }
      } else {
        isAuthenticated.value = false;
      }
    }
  };

  return {
    user,
    token,
    isAuthenticated,
    isAdmin, // 游녣 Exporta칞칚o do novo getter
    login,
    logout,
    init
  };
});

================= FILE: server/api/auth.post.ts =================

// /server/api/auth.post.ts - V1.2 Login pelo primeiro nome
import { defineEventHandler, readBody, createError } from 'h3';
import { prisma } from '~/server/utils/db';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

export default defineEventHandler(async (event) => {
  try {
    const { username, password } = await readBody(event);

    if (!username || !password) {
      throw createError({ statusCode: 400, statusMessage: 'Nome de usu치rio e senha s칚o obrigat칩rios.' });
    }

    // Busca pelo primeiro nome (ignora sobrenomes e case)
    const user = await prisma.users.findFirst({
      where: {
        username: {
          startsWith: username,
          mode: 'insensitive',
        },
      },
    });

    if (!user) {
      throw createError({ statusCode: 401, statusMessage: 'Credenciais inv치lidas.' });
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      throw createError({ statusCode: 401, statusMessage: 'Credenciais inv치lidas.' });
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET || 'fallback_secret_NAO_USAR_EM_PRODUCAO',
      { expiresIn: '1d' }
    );

    return {
      token,
      userId: user.id,
      username: user.username,
      email: user.email,
      role: user.role,
      apelido: user.apelido,
      photo_perfil_url: user.photo_perfil_url,
      heightCm: user.height_cm,
      initialWeight: user.initial_weight_kg,
    };
  } catch (error) {
    if (error.statusCode) throw error;
    console.error('Erro de autentica칞칚o:', error);
    throw createError({ statusCode: 500, statusMessage: 'Erro interno do servidor.' });
  }
});
