

================= FILE: nuxt.config.ts =================

// nuxt.config.ts - V1.4 - Ativa√ß√£o do modo debug para Nuxt Devtools/Context
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
 devtools: { enabled: true, debug: true }, // <-- ADICIONADO AQUI

 nitro: {
  compatibilityDate: '2025-09-30',
  externals: {
   inline: ['cloudinary', 'bcryptjs'], // empacotar dentro do Nitro
   external: ['@prisma/client'],    // manter prisma como depend√™ncia externa
  },
 },

 runtimeConfig: {
  openWeatherApiKey: process.env.OPENWEATHER_API_KEY,
  public: {
   apiBaseUrl: process.env.NUXT_PUBLIC_API_BASE_URL,
  },
 },

 modules: ['@nuxtjs/tailwindcss', '@pinia/nuxt'],

 css: ['~/assets/css/main.css'],
})

================= FILE: tailwind.config.js =================

// tailwind.config.js - V1.1 - Adi√ß√£o de cores din√¢micas para o clima
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./components/**/*.{js,vue,ts}",
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./nuxt.config.{js,ts}",
  ],
  theme: {
    extend: {
      colors: {
        // Cores dos Cards (Existente)
        'card-azul': '#E0F2FE',
        'card-roxo': '#E6E1FF',
        'card-amarelo': '#EDE5D6',
        'card-verde': '#E3F0E4',
        'card-terracota': '#FFF0EB',
        'card-rosa': '#F8EBFD',
        'card-gelo': '#E6E6EE',
        'card-laranja': '#D78159',

        // üö® NOVAS CORES DO CLIMA (Fundo)
        'card-weather-sun': '#E6F7FF',        // Sol (Dia - 01d, 02d)
        'card-weather-night': '#1F2937',      // Noite (01n, 02n)
        'card-weather-cloudy': '#F3F4F6',     // Nublado (03x, 04x)
        'card-weather-rain': '#BFDBFE',       // Chuva (09x, 10x)
        'card-weather-thunder': '#4B0082',    // Tempestade (11x)
        'card-weather-snow': '#FFFFFF',       // Neve (13x)
        'card-weather-mist': '#F9FAFB',       // N√©voa (50x)
        'card-weather-error': '#FEE2E2',      // Erro/Fallback

        // Cores das Fontes (Existente)
        'font-azul': '#9AB3E5',
        'font-roxo': '#B014EA',
        'font-amarelo': '#F3934F',
        'font-verde': '#1DA01C',
        'font-terracota': '#F2350E',
        'font-rosa': '#D7B4B6',
        'font-gelo': '#5D5D5D',
        'font-laranja': '#ffffff',
        
        // üö® NOVAS CORES DO CLIMA (Fonte)
        'font-weather-sun': '#36A2EB',
        'font-weather-night': '#F3F4F6',
        'font-weather-cloudy': '#4B5563',
        'font-weather-rain': '#1D4ED8',
        'font-weather-thunder': '#FFD700',
        'font-weather-snow': '#1E3A8A',
        'font-weather-mist': '#4B5563',
        'font-weather-error': '#EF4444',


        // Cores dos Bot√µes
        'btn-principal': '#E9E9FF',
        'btn-secundario': '#070FFC',
        'btn-desativado': '#C7D1E1',

        // Cores das Fontes dos Bot√µes
        'btn-font-principal': '#4845CF',
        'btn-font-secundario': '#ffffff',
        'btn-font-desativado': '#000000',
      }
    },
  },
  plugins: [],
}

================= FILE: prisma/schema.prisma =================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attention_point_treatments {
  attention_point_id Int
  treatment_id       Int
  treatment_date     DateTime?        @db.Date
  attention_points   attention_points @relation(fields: [attention_point_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  treatments         treatments       @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([attention_point_id, treatment_id])
}

model attention_points {
  id                         Int                          @id @default(autoincrement())
  user_id                    Int
  photo_url                  String
  point_of_attention_type    String?                      @db.VarChar(255)
  notes                      String?
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  attention_point_treatments attention_point_treatments[]
  users                      users                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comentarios {
  id                Int           @id @default(autoincrement())
  id_usuario        Int
  id_post           Int
  mensagem          String
  criado_em         DateTime      @default(now()) @db.Timestamptz(6)
  id_comentario_pai Int?
  comentarios       comentarios?  @relation("comentariosTocomentarios", fields: [id_comentario_pai], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comentarios comentarios[] @relation("comentariosTocomentarios")
  posts             posts         @relation(fields: [id_post], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users         @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model measurements {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  unit                String?               @db.VarChar(50)
  record_measurements record_measurements[]
}

model posts {
  id           Int            @id @default(autoincrement())
  titulo       String?        @db.VarChar(255)
  mensagem     String
  imagem_url   String?
  id_usuario   Int
  criado_em    DateTime       @default(now()) @db.Timestamptz(6)
  comentarios  comentarios[]
  users        users          @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reacoes_post reacoes_post[]
}

model reacoes_post {
  id_usuario   Int
  id_post      Int
  id_reacao    Int
  criado_em    DateTime     @default(now()) @db.Timestamptz(6)
  posts        posts        @relation(fields: [id_post], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tipos_reacao tipos_reacao @relation(fields: [id_reacao], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users        @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_usuario, id_post])
}

model record_measurements {
  id             Int           @id @default(autoincrement())
  record_id      Int?
  measurement_id Int?
  value          Decimal       @db.Decimal(5, 2)
  measurements   measurements? @relation(fields: [measurement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  records        records?      @relation(fields: [record_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model records {
  id                  Int                   @id @default(autoincrement())
  record_date         DateTime              @db.Date
  weight              Decimal?              @db.Decimal(5, 2)
  event               String?               @db.VarChar(255)
  weekly_action       String?               @db.VarChar(255)
  workout_days        Int?
  observations        String?
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  user_id             Int?
  files               files[]
  record_measurements record_measurements[]
  users               users?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model tipos_reacao {
  id           Int            @id @default(autoincrement())
  nome_reacao  String         @unique @db.VarChar(50)
  reacoes_post reacoes_post[]
}

model treatments {
  id                         Int                          @id @default(autoincrement())
  treatment_name             String                       @unique @db.VarChar(255)
  attention_point_treatments attention_point_treatments[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                Int                @id @default(autoincrement())
  username          String             @unique @db.VarChar(255)
  password_hash     String?            @db.VarChar(255)
  role              String             @default("user") @db.VarChar(50)
  email             String             @unique @db.VarChar(255)
  birthdate         DateTime?          @db.Date
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  photo_perfil_url  String?
  height_cm         Int?
  initial_weight_kg Decimal?           @db.Decimal(5, 2)
  apelido           String?            @db.VarChar(255)
  sexo              String?            @db.VarChar(50)
  last_login        DateTime?          @db.Timestamptz(6)
  attention_points  attention_points[]
  comentarios       comentarios[]
  posts             posts[]
  reacoes_post      reacoes_post[]
  records           records[]
}

model files {
  id         Int      @id(map: "Files_pkey") @default(autoincrement())
  file_url   String   @db.VarChar(255)
  file_type  Int      @default(0) @db.SmallInt
  is_private Int      @default(0) @db.SmallInt
  record_id  Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  records    records  @relation(fields: [record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record")
}


================= FILE: package.json =================

{
  "name": "nuxt-app",
  "type": "module",
  "private": true,
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "book": "node concat.js"
  },
  "dependencies": {
    "@nuxtjs/tailwindcss": "^6.14.0",
    "@pinia/nuxt": "^0.11.2",
    "@prisma/client": "^6.16.2",
    "@vueuse/core": "^13.9.0",
    "bcryptjs": "^3.0.2",
    "chart.js": "^4.5.0",
    "cloudinary": "^2.7.0",
    "jsonwebtoken": "^9.0.2",
    "nuxt": "^4.1.2",
    "pinia": "^3.0.3",
    "pinia-plugin-persistedstate": "^4.5.0",
    "prisma": "^6.16.3",
    "vue": "^3.5.21",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@types/node": "^24.5.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2"
  }
}


================= FILE: .env =================

# Vari√°vel de Ambiente P√∫blica para o Frontend
# O Nuxt usa NUXT_PUBLIC_ para expor ao cliente
NUXT_PUBLIC_API_BASE_URL="http://localhost:3000"

# This was inserted by `prisma init`:
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL="postgres://neondb_owner:npg_cq7aYX8VCAQJ@ep-odd-king-ad9ty1h8-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require"
OPENWEATHER_API_KEY="7266ddb3d14331910bdc98966924d8d0"

CLOUDINARY_CLOUD_NAME=dh3z4ic30
CLOUDINARY_API_KEY=423979354312522
CLOUDINARY_API_SECRET=Sll6BQxjg5RLdd2LRXbs0u1ckK0
