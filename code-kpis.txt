

================= FILE: pages/index.vue =================

// /pages/index.vue - V1.8 - Fix Botão Adicionar (Toggle)
<template>
 <div>
  <Header />

  <div class="container mx-auto px-4 my-8">
   <div class="my-8">
    <ClientOnly>
     <h2 class="text-3xl font-bold text-gray-800">
      {{ greetingMessage }}, {{ authStore.user?.apelido || authStore.user?.username || 'Usuário' }}!
     </h2>
     <p v-if="isLoading" class="text-gray-500">carregando seus dados...</p>
     <p v-else-if="error" class="text-red-500">{{ error }}</p>
     </ClientOnly>
   </div>

   <div class="mb-4">
    <KpiCard
     label="Clima Atual"
     :value="weatherData.value"
     color="terracota"
     :icon-url="weatherData.iconUrl"
     icon-alt="Ícone de Clima"
     :weather-code="weatherData.code"
    />
    <p v-if="isWeatherLoading" class="text-sm text-gray-500 mt-1">Carregando clima em **{{ weatherData.city || 'localização padrão' }}**...</p>
    <p v-else-if="weatherError" class="text-sm text-red-500 mt-1">Erro ao carregar clima: {{ weatherError || 'verifique o console' }}.</p>
   </div>

   <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
    <KpiCard
     label="Peso Atual"
     :value="`${kpiData.currentWeight} kg`"
     color="azul"
     icon-url="https://api.iconify.design/solar:scale-bold-duotone.svg"
     icon-alt="Ícone de Escala"
    />

    <KpiCard
     label="Perda Total"
     :value="`${kpiData.totalLoss} kg`"
     color="roxo"
     icon-url="https://api.iconify.design/solar:minus-square-bold-duotone.svg"
     icon-alt="Ícone de Perda"
    />

    <KpiCard
     label="Status Semanal"
     value="Estável"
     color="amarelo"
     icon-url="https://api.iconify.design/solar:calendar-bold-duotone.svg"
     icon-alt="Ícone de Calendário"
    />

    <KpiCard
     label="IMC"
     :value="kpiData.imc?.toFixed(2) || '---'" 
     color="verde"
     icon-url="https://api.iconify.design/solar:ruler-bold-duotone.svg"
     icon-alt="Ícone de Régua"
    />
   </div>

   <div class="mt-8 text-center">
    <button
     @click="startNewRecord"
     class="px-6 py-3 bg-btn-principal text-btn-font-principal rounded-md font-bold hover:opacity-80"
    >
     <i class="fas fa-plus-circle mr-2"></i> Adicionar Novo Registro
    </button>
   </div>

   <DataForm v-if="showForm" :record-id="editingRecordId" @recordSaved="handleRecordSaved" />

   <DataDisplay 
    :raw-chart-data="chartData" 
    :has-registro-photos="hasRegistroPhotos" 
    :has-forma-photos="hasFormaPhotos" 
    @editRecord="handleEditRecord"
   />
  </div>

  <Footer />
 </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue'; 
import { useAuthStore } from '~/stores/auth';
import { useKpiData } from '~/composables/useKpiData';

definePageMeta({
 middleware: ['auth'] 
});

const authStore = useAuthStore();
const showForm = ref(false);
const editingRecordId = ref(null); 

// --- Lógica KPI ---
const { 
 kpiData, 
 chartData, 
 isLoading, 
 error, 
 fetchData,
 hasRegistroPhotos, 
 hasFormaPhotos 
} = useKpiData();

// --- Saudação Dinâmica ---
const greetingMessage = computed(() => {
 const hour = new Date().getHours();
 if (hour >= 5 && hour < 12) {
  const options = ["Bom dia", "Lindo dia", "Excelente manhã"];
  return options[Math.floor(Math.random() * options.length)];
 } else if (hour >= 12 && hour < 18) {
  const options = ["Boa tarde", "Excelente dia", "Que tarde agradável"];
  return options[Math.floor(Math.random() * options.length)];
 } else {
  const options = ["Boa noite", "Bom te ver", "Esperamos que tenha tido um bom dia"];
  return options[Math.floor(Math.random() * options.length)];
 }
});

// --- Lógica Clima ---
const weatherData = ref({ 
 value: '---', 
 iconUrl: 'https://api.iconify.design/solar:sun-bold-duotone.svg', 
 description: '',
 city: 'N/A',
 code: null 
});
const isWeatherLoading = ref(false);
const weatherError = ref(null);


const fetchWeather = () => {
 isWeatherLoading.value = true;
 weatherError.value = null;
 
 if (process.client && navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(
   (position) => {
    callWeatherApi(position.coords.latitude, position.coords.longitude);
   },
   () => {
    callWeatherApi();
   }
  );
 } else {
  callWeatherApi();
 }
};

const callWeatherApi = async (lat = null, lon = null) => {
 try {
  const params = {};
  if (lat && lon) {
   params.lat = lat;
   params.lon = lon;
  }

  const response = await $fetch('/api/weather', { params });
  
  weatherData.value.value = `${response.temperature} - ${response.description}`;
  weatherData.value.iconUrl = `https://openweathermap.org/img/wn/${response.iconCode}@2x.png`;
  weatherData.value.description = response.description;
  weatherData.value.city = response.city; 
  weatherData.value.code = response.iconCode; 

 } catch (e) {
  weatherError.value = e.statusMessage || 'Falha na comunicação com o serviço de clima.';
  weatherData.value.value = 'N/A';
  weatherData.value.iconUrl = 'https://api.iconify.design/solar:cloud-snow-bold-duotone.svg'; 
  weatherData.value.city = 'Localização Desconhecida';
  weatherData.value.code = 'error'; 
 } finally {
  isWeatherLoading.value = false;
 }
}


// --- Handlers de Ação ---

const startNewRecord = () => {
 editingRecordId.value = null;
 // CORREÇÃO CRÍTICA: Faz o toggle (inversão) do valor atual para abrir/fechar
 showForm.value = !showForm.value; 
};

const handleEditRecord = (recordId) => {
 editingRecordId.value = recordId;
 showForm.value = true;
};

const handleRecordSaved = () => {
 fetchData(); 
 showForm.value = false; 
 editingRecordId.value = null; 
};

onMounted(() => {
 fetchData(); 
 fetchWeather(); 
});
</script>

================= FILE: components/Header.vue =================

// /components/Header.vue - V1.2 - Correção de CSS para o submenu não sair da tela
<template>
  <header class="flex items-center justify-between p-4 shadow-md bg-white relative">
    <h1 class="text-xl font-bold text-gray-800">WLC - G & C</h1>

    <div class="flex items-center gap-4 relative">
      <span class="font-medium text-gray-700">
        {{ firstName }}
      </span>

      <div class="relative">
        <button @click="toggleMenu" class="w-10 h-10 rounded-full overflow-hidden border border-gray-300 flex items-center justify-center bg-gray-200 focus:outline-none">
          <img
            v-if="authStore.user?.photo_perfil_url"
            :src="authStore.user.photo_perfil_url"
            alt="Foto de Perfil"
            class="w-full h-full object-cover"
            @error="handleImgError"
          />
          <span v-else class="text-sm font-bold text-gray-600">{{ initials }}</span>
        </button>

        <div
          v-if="menuOpen"
          class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50"
        >
          <ul class="py-2">
            <li>
              <button
                @click="goToProfile"
                class="w-full text-left px-4 py-2 hover:bg-gray-100 text-gray-700"
              >
                Meu Perfil
              </button>
            </li>

            <li v-if="authStore.isAdmin" class="relative group">
              <div
                class="w-full px-4 py-2 flex justify-between items-center hover:bg-gray-100 text-gray-700 cursor-pointer"
              >
                Administrar
                <span class="text-gray-500">▶</span>
              </div>
              <ul
                class="absolute top-0 right-full mr-1 w-56 bg-white rounded-lg shadow-lg border border-gray-200 hidden group-hover:block"
              >
                <li>
                  <button
                    @click="goToUserAdmin"
                    class="w-full text-left px-4 py-2 hover:bg-gray-100 text-gray-700"
                  >
                    Administração de Usuários
                  </button>
                </li>
              </ul>
            </li>

            <li>
              <button
                @click="logout"
                class="w-full text-left px-4 py-2 hover:bg-gray-100 text-red-600 font-semibold"
              >
                Sair
              </button>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </header>
</template>

<script setup>
import { ref, computed, onMounted, onBeforeUnmount } from 'vue'
import { useAuthStore } from '~/stores/auth'
import { navigateTo } from '#app'

const authStore = useAuthStore()
const menuOpen = ref(false)

// Somente o primeiro nome
const firstName = computed(() => {
  if (authStore.user?.username) {
    return authStore.user.username.split(' ')[0]
  }
  return 'Usuário'
})

// Iniciais para fallback
const initials = computed(() => {
  if (authStore.user?.username) {
    return authStore.user.username.charAt(0).toUpperCase()
  }
  return 'U'
})

const handleImgError = () => {
  // Define a URL como nula para que o v-else exiba as iniciais
  if (authStore.user) {
    authStore.user.photo_perfil_url = null 
  }
}

const toggleMenu = () => {
  menuOpen.value = !menuOpen.value
}

const closeMenu = (event) => {
  if (!event.target.closest('.relative')) {
    menuOpen.value = false
  }
}

// Fecha menu ao clicar fora
onMounted(() => {
  document.addEventListener('click', closeMenu)
})
onBeforeUnmount(() => {
  document.removeEventListener('click', closeMenu)
})

// Navegação
const goToProfile = () => {
  menuOpen.value = false
  navigateTo('/profile')
}

const goToUserAdmin = () => {
  menuOpen.value = false
  navigateTo('/admin/users')
}

const logout = () => {
  authStore.logout()
  menuOpen.value = false
  navigateTo('/login')
}
</script>

================= FILE: components/KpiCard.vue =================

// components/KpiCard.vue - V1.1 - Adiciona lógica de estilização dinâmica para o clima e alinhamento à esquerda
<template>
  <div :class="['rounded-xl shadow-md p-4 flex items-center space-x-4', isWeatherCard ? 'justify-start' : 'justify-center', cardClasses]">
    <img :src="iconUrl" :alt="iconAlt" class="w-10 h-10" />
    <div :class="['flex flex-col', isWeatherCard ? 'items-start' : 'items-center', 'justify-center']">
      <span :class="['text-sm font-semibold', fontClasses]">{{ label }}</span>
      <span :class="['text-lg font-bold', fontClasses]">{{ value }}</span>
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue';

const props = defineProps({
  label: {
    type: String,
    required: true,
  },
  value: {
    type: [String, Number],
    required: true,
  },
  color: {
    type: String,
    required: true,
    validator: (value) => ['terracota', 'azul', 'roxo', 'amarelo', 'verde', 'rosa', 'gelo', 'laranja'].includes(value),
  },
  iconUrl: {
    type: String,
    required: true,
  },
  iconAlt: {
    type: String,
    default: 'Ícone de KPI',
  },
  // 🚨 NOVO: Propriedade para receber o código do clima
  weatherCode: {
    type: String,
    default: null,
  }
});

// Checa se este card é o card do clima (que usa 'terracota' no pages/index.vue)
const isWeatherCard = computed(() => props.color === 'terracota');

// 🚨 Mapeamento de códigos do OpenWeatherMap para classes Tailwind de Fundo
const weatherBgMap = {
  '01d': 'bg-card-weather-sun', '02d': 'bg-card-weather-sun',
  '03d': 'bg-card-weather-cloudy', '04d': 'bg-card-weather-cloudy',
  '09d': 'bg-card-weather-rain', '10d': 'bg-card-weather-rain',
  '11d': 'bg-card-weather-thunder',
  '13d': 'bg-card-weather-snow',
  '50d': 'bg-card-weather-mist',
  '01n': 'bg-card-weather-night', '02n': 'bg-card-weather-night',
  '03n': 'bg-card-weather-cloudy', '04n': 'bg-card-weather-cloudy',
  '09n': 'bg-card-weather-rain', '10n': 'bg-card-weather-rain',
  '11n': 'bg-card-weather-thunder',
  '13n': 'bg-card-weather-snow',
  '50n': 'bg-card-weather-mist',
  'error': 'bg-card-weather-error', // Fallback para erro
  'default': 'bg-card-terracota'
};

// 🚨 Mapeamento de códigos do OpenWeatherMap para classes Tailwind de Fonte
const weatherFontMap = {
  '01d': 'text-font-weather-sun', '02d': 'text-font-weather-sun',
  '03d': 'text-font-weather-cloudy', '04d': 'text-font-weather-cloudy',
  '09d': 'text-font-weather-rain', '10d': 'text-font-weather-rain',
  '11d': 'text-font-weather-thunder',
  '13d': 'text-font-weather-snow',
  '50d': 'text-font-weather-mist',
  '01n': 'text-font-weather-night', '02n': 'text-font-weather-night',
  '03n': 'text-font-weather-cloudy', '04n': 'text-font-weather-cloudy',
  '09n': 'text-font-weather-rain', '10n': 'text-font-weather-rain',
  '11n': 'text-font-weather-thunder',
  '13n': 'text-font-weather-snow',
  '50n': 'text-font-weather-mist',
  'error': 'text-font-weather-error',
  'default': 'text-font-terracota'
};


const cardClasses = computed(() => {
  // 1. Lógica para o card do clima (terracota)
  if (isWeatherCard.value && props.weatherCode) {
    const code = props.weatherCode in weatherBgMap ? props.weatherCode : 'default';
    return weatherBgMap[code];
  }
  
  // 2. Lógica padrão para outros cards
  const colorMap = {
    terracota: 'bg-card-terracota', // Fallback se não for clima, mas for 'terracota'
    azul: 'bg-card-azul',
    roxo: 'bg-card-roxo',
    amarelo: 'bg-card-amarelo',
    verde: 'bg-card-verde',
    rosa: 'bg-card-rosa',
    gelo: 'bg-card-gelo',
    laranja: 'bg-card-laranja',
  };
  return colorMap[props.color];
});

const fontClasses = computed(() => {
  // 1. Lógica para o card do clima (terracota)
  if (isWeatherCard.value && props.weatherCode) {
    const code = props.weatherCode in weatherFontMap ? props.weatherCode : 'default';
    return weatherFontMap[code];
  }

  // 2. Lógica padrão para outros cards
  const colorMap = {
    terracota: 'text-font-terracota', // Fallback se não for clima, mas for 'terracota'
    azul: 'text-font-azul',
    roxo: 'text-font-roxo',
    amarelo: 'text-font-amarelo',
    verde: 'text-font-verde',
    rosa: 'text-font-rosa',
    gelo: 'text-font-gelo',
    laranja: 'text-font-laranja',
  };
  return colorMap[props.color];
});
</script>

<style scoped>
/* Nenhum estilo necessário aqui, pois estamos usando classes do Tailwind */
</style>