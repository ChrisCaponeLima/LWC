

================= FILE: pages/user_management.vue =================

<template>
    <div>
      <Header />
  
      <div class="container mx-auto px-4 my-8">
        <h2 class="text-3xl font-bold text-gray-800 mb-6">Gerenciamento de Usuários</h2>
  
        <div class="flex justify-between items-center mb-6">
          <input
            type="text"
            v-model="searchQuery"
            placeholder="Buscar usuários..."
            class="p-2 border border-gray-300 rounded-md w-1/3"
          />
          <button
            @click="openAddUserModal"
            class="px-4 py-2 bg-btn-secundario text-btn-font-secundario rounded-md font-semibold hover:opacity-80 transition"
          >
            Adicionar Novo Usuário
          </button>
        </div>
  
        <div class="bg-white shadow-lg rounded-xl overflow-hidden">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nome de Usuário</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cargo</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Último Login</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
              <tr v-for="user in filteredUsers" :key="user.id" class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ user.id }}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ user.username }}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span :class="{'px-2 inline-flex text-xs leading-5 font-semibold rounded-full': true, 'bg-green-100 text-green-800': user.role === 'admin', 'bg-blue-100 text-blue-800': user.role === 'user'}">
                    {{ user.role }}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ user.lastLogin }}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                  <button @click="editUser(user)" class="text-indigo-600 hover:text-indigo-900">Editar</button>
                  <button @click="deleteUser(user.id)" class="text-red-600 hover:text-red-900">Excluir</button>
                </td>
              </tr>
            </tbody>
          </table>
          
          <div v-if="filteredUsers.length === 0" class="p-4 text-center text-gray-500">
            Nenhum usuário encontrado.
          </div>
        </div>
      </div>
  
      <Footer />
    </div>
  </template>
  
  <script setup>
  import { ref, computed } from 'vue';
  import { useAuthStore } from '~/stores/auth';
  
  // --- 1. Proteção de Rota Específica para Admin ---
  definePageMeta({
    middleware: [
      'auth', // Garante que o usuário esteja logado
      async (to, from) => {
        const authStore = useAuthStore();
        authStore.loadUser(); // Garante que o estado mais recente seja carregado
  
        if (!authStore.isAdmin) {
          // Redireciona para a página inicial se não for admin
          return navigateTo('/');
        }
      }
    ]
  });
  
  // --- 2. Simulação de Dados de Usuário ---
  const users = ref([
    { id: 1, username: 'admin', role: 'admin', email: 'admin@app.com', lastLogin: '2025-09-25' },
    { id: 2, username: 'usuario1', role: 'user', email: 'user1@app.com', lastLogin: '2025-09-24' },
    { id: 3, username: 'cliente_vip', role: 'user', email: 'vip@app.com', lastLogin: '2025-09-23' },
    { id: 4, username: 'teste_user', role: 'user', email: 'teste@app.com', lastLogin: '2025-09-21' },
  ]);
  
  const searchQuery = ref('');
  
  // --- 3. Lógica de Filtro Reativo ---
  const filteredUsers = computed(() => {
    if (!searchQuery.value) {
      return users.value;
    }
    const query = searchQuery.value.toLowerCase();
    return users.value.filter(user => 
      user.username.toLowerCase().includes(query) ||
      user.email.toLowerCase().includes(query)
    );
  });
  
  // --- 4. Funções de Ação (simulação) ---
  const openAddUserModal = () => {
    alert('Funcionalidade: Abrir modal para adicionar novo usuário. Você implementará a API aqui.');
    // Aqui você abriria um componente modal para a criação de usuário
  };
  
  const editUser = (user) => {
    alert(`Funcionalidade: Editar usuário ${user.username}.`);
  };
  
  const deleteUser = (userId) => {
    if (confirm('Tem certeza de que deseja excluir este usuário?')) {
      // Lógica para chamar a API de exclusão
      users.value = users.value.filter(user => user.id !== userId);
      alert(`Usuário ${userId} excluído com sucesso (simulação).`);
    }
  };
  </script>