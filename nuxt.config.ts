// /nuxt.config.ts - V1.15 - Refor√ßo CR√çTICO do limite de payload do Nitro.

import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
devtools: { enabled: true, debug: true }, 

// 1. Manter: Transpila√ß√£o
build: {
transpile: ['cloudinary'],
},

nitro: {
compatibilityDate: '2025-09-30',
externals: {
 inline: ['bcryptjs'], 
 external: ['@prisma/client', 'cloudinary'], 
},
    // üö® ALTERA√á√ÉO CR√çTICA: Definir maxBodySize atrav√©s de uma vari√°vel de ambiente injetada
    // Se a vari√°vel NITRO_MAX_BODY_SIZE n√£o est√° funcionando no ambiente, 
    // podemos tentar injetar o limite do body de forma expl√≠cita no runtime.
    // O valor deve ser definido em bytes. 4718592 = 4.5MB
    // Este m√©todo √© um fallback quando a vari√°vel de ambiente n√£o √© lida pelo H3/Nitro.
    runtimeConfig: {
        // Usa uma vari√°vel de ambiente CUSTOMIZADA, com fallback para o valor exigido
        // Garante que o valor de 4.5MB seja o limite.
        maxPayloadSize: process.env.PAYLOAD_MAX_SIZE || 4718592, // üö® NOVO: Vari√°vel injetada
    }
},

// üö® ALTERA√á√ÉO CR√çTICA (Controle): Exp√µe a vari√°vel de limite para o lado do cliente (se necess√°rio)
runtimeConfig: {
openWeatherApiKey: process.env.OPENWEATHER_API_KEY,
// üö® NOVO: Adiciona o limite de payload ao runtimeConfig (acess√≠vel via useRuntimeConfig())
maxPayloadSize: process.env.PAYLOAD_MAX_SIZE || 4718592, 
public: {
 apiBaseUrl: process.env.NUXT_PUBLIC_API_BASE_URL,
    // üö® NOVO: Expor o limite no cliente
    maxPayloadSize: process.env.PAYLOAD_MAX_SIZE || 4718592, 
},
},

modules: ['@nuxtjs/tailwindcss', '@pinia/nuxt'],

css: ['~/assets/css/main.css'],

// Manter o bloco vite comentado
// ...
})