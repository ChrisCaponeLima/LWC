generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attention_point_treatments {
  attention_point_id Int
  treatment_id       Int
  treatment_date     DateTime?        @db.Date
  attention_points   attention_points @relation(fields: [attention_point_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  treatments         treatments       @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([attention_point_id, treatment_id])
}

model attention_points {
  id                         Int                          @id @default(autoincrement())
  user_id                    Int
  photo_url                  String
  point_of_attention_type    String?                      @db.VarChar(255)
  notes                      String?
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  attention_point_treatments attention_point_treatments[]
  users                      users                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comentarios {
  id                Int           @id @default(autoincrement())
  id_usuario        Int
  id_post           Int
  mensagem          String
  criado_em         DateTime      @default(now()) @db.Timestamptz(6)
  id_comentario_pai Int?
  comentarios       comentarios?  @relation("comentariosTocomentarios", fields: [id_comentario_pai], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comentarios comentarios[] @relation("comentariosTocomentarios")
  users             users         @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model measurements {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  unit                String?               @db.VarChar(50)
  record_measurements record_measurements[]
}

model record_measurements {
  id             Int           @id @default(autoincrement())
  record_id      Int?
  measurement_id Int?
  value          Decimal       @db.Decimal(5, 2)
  measurements   measurements? @relation(fields: [measurement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  records        records?      @relation(fields: [record_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model records {
  id                  Int                   @id @default(autoincrement())
  record_date         DateTime              @db.Date
  weight              Decimal?              @db.Decimal(5, 2)
  event               String?               @db.VarChar(255)
  weekly_action       String?               @db.VarChar(255)
  workout_days        Int?
  observations        String?
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  user_id             Int?
  files               files[]
  record_measurements record_measurements[]
  users               users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model treatments {
  id                         Int                          @id @default(autoincrement())
  treatment_name             String                       @unique @db.VarChar(255)
  attention_point_treatments attention_point_treatments[]
  treatment_products         treatment_products[]
  user_treatment_photos      user_treatment_photos[]
  user_treatments            user_treatments[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                                                                            Int                                 @id @default(autoincrement())
  username                                                                                      String                              @unique @db.VarChar(255)
  password_hash                                                                                 String?                             @db.VarChar(255)
  role                                                                                          String                              @default("user") @db.VarChar(50)
  email                                                                                         String                              @unique @db.VarChar(255)
  birthdate                                                                                     DateTime?                           @db.Date
  created_at                                                                                    DateTime?                           @default(now()) @db.Timestamptz(6)
  photo_perfil_url                                                                              String?
  height_cm                                                                                     Int?
  initial_weight_kg                                                                             Decimal?                            @db.Decimal(5, 2)
  apelido                                                                                       String?                             @db.VarChar(255)
  sexo                                                                                          String?                             @db.VarChar(50)
  last_login                                                                                    DateTime?                           @db.Timestamptz(6)
  phone                                                                                         String?                             @db.VarChar(11)
  active                                                                                        Boolean?                            @default(true)
  attention_points                                                                              attention_points[]
  chat_rooms_chat_rooms_user_one_idTousers                                                      chat_rooms[]                        @relation("chat_rooms_user_one_idTousers")
  chat_rooms_chat_rooms_user_two_idTousers                                                      chat_rooms[]                        @relation("chat_rooms_user_two_idTousers")
  comentarios                                                                                   comentarios[]
  edited                                                                                        edited[]
  messages                                                                                      messages[]
  professionals                                                                                 professionals[]
  records                                                                                       records[]
  treatment_products                                                                            treatment_products[]
  user_partnerships_user_partnerships_partner_user_idTousers                                    user_partnerships[]                 @relation("user_partnerships_partner_user_idTousers")
  user_partnerships_user_partnerships_user_idTousers                                            user_partnerships[]                 @relation("user_partnerships_user_idTousers")
  user_treatment_photos                                                                         user_treatment_photos[]
  user_treatment_photos_annotations_user_treatment_photos_annotations_created_by_user_idTousers user_treatment_photos_annotations[] @relation("user_treatment_photos_annotations_created_by_user_idTousers")
  user_treatment_photos_annotations_user_treatment_photos_annotations_user_idTousers            user_treatment_photos_annotations[] @relation("user_treatment_photos_annotations_user_idTousers")
  user_treatments                                                                               user_treatments[]
}

model files {
  id         Int      @id(map: "Files_pkey") @default(autoincrement())
  file_url   String   @db.VarChar(255)
  file_type  Int      @default(0) @db.SmallInt
  is_private Int      @default(0) @db.SmallInt
  record_id  Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  records    records  @relation(fields: [record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model chat_rooms {
  id                                  Int        @id @default(autoincrement())
  user_one_id                         Int
  user_two_id                         Int
  created_at                          DateTime   @default(now()) @db.Timestamp(6)
  updated_at                          DateTime   @default(now()) @db.Timestamp(6)
  users_chat_rooms_user_one_idTousers users      @relation("chat_rooms_user_one_idTousers", fields: [user_one_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_chat_rooms_user_two_idTousers users      @relation("chat_rooms_user_two_idTousers", fields: [user_two_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages                            messages[]

  @@unique([user_one_id, user_two_id])
  @@index([user_one_id], map: "idx_chat_rooms_user_one_id")
  @@index([user_two_id], map: "idx_chat_rooms_user_two_id")
}

model edited {
  id           Int       @id @default(autoincrement())
  user_id      Int
  original_url String    @db.VarChar(512)
  edited_url   String?   @db.VarChar(512)
  record_id    Int?
  file_id      Int?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id                   Int                  @id @default(autoincrement())
  room_id              Int
  sender_id            Int
  content              String?
  is_read              Boolean              @default(false)
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  deleted_by_sender    Boolean              @default(false)
  deleted_by_recipient Boolean              @default(false)
  chat_message_files   chat_message_files[]
  chat_rooms           chat_rooms           @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users                @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_partnerships {
  user_id                                        Int
  partner_user_id                                Int
  created_at                                     DateTime @default(now()) @db.Timestamp(6)
  users_user_partnerships_partner_user_idTousers users    @relation("user_partnerships_partner_user_idTousers", fields: [partner_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_user_partnerships_user_idTousers         users    @relation("user_partnerships_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, partner_user_id])
  @@index([partner_user_id], map: "idx_user_partnerships_partner_user_id")
}

model chat_message_files {
  id         Int       @id @default(autoincrement())
  message_id Int
  file_url   String    @db.VarChar(512)
  file_type  String    @default("image") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  messages   messages  @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_id")
}

model professionals {
  id                                Int                                 @id @default(autoincrement())
  job_title                         String?                             @db.VarChar(150)
  registro_conselho                 String?                             @unique @db.VarChar(50)
  cpf                               String?                             @unique @db.VarChar(14)
  is_active                         Boolean                             @default(true)
  address_street                    String?                             @db.VarChar(255)
  address_city                      String?                             @db.VarChar(100)
  address_state                     String?                             @db.VarChar(50)
  address_zipcode                   String?                             @db.VarChar(10)
  created_at                        DateTime                            @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime                            @default(now()) @db.Timestamptz(6)
  user_id                           Int
  users                             users                               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_professionals_users")
  professionals_specialties         professionals_specialties[]
  treatment_products                treatment_products[]
  user_treatment_photos             user_treatment_photos[]
  user_treatment_photos_annotations user_treatment_photos_annotations[]
}

model professionals_specialties {
  professional_id Int
  specialty_id    Int
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  professionals   professionals @relation(fields: [professional_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialties     specialties   @relation(fields: [specialty_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([professional_id, specialty_id])
}

model specialties {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique @db.VarChar(100)
  description               String?
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  professionals_specialties professionals_specialties[]
}

model user_treatment_photos {
  id                                Int                                 @id @default(autoincrement())
  user_id                           Int
  treatment_id                      Int
  uploaded_by_user                  Boolean
  uploaded_by_professional_id       Int?
  file_url                          String                              @db.VarChar(512)
  description                       String?
  is_private                        Boolean                             @default(true)
  created_at                        DateTime                            @default(now()) @db.Timestamptz(6)
  treatment_date                    DateTime?                           @db.Date
  professionals                     professionals?                      @relation(fields: [uploaded_by_professional_id], references: [id], onUpdate: NoAction, map: "fk_user_treatment_photos_professional")
  users                             users                               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_treatment_photos_user")
  treatments                        treatments                          @relation(fields: [treatment_id], references: [id], onUpdate: NoAction)
  user_treatment_photos_annotations user_treatment_photos_annotations[]

  @@index([treatment_id], map: "idx_user_treatment_photos_treatment_id")
  @@index([user_id], map: "idx_user_treatment_photos_user_id")
}

model edited_files {
  file_id              String    @id @db.VarChar(36)
  cloudinary_public_id String    @db.VarChar(255)
  file_url             String
  is_edited            Boolean   @default(false)
  is_private           Boolean   @default(false)
  file_type            Int       @db.SmallInt
  created_at           DateTime? @default(now()) @db.Timestamp(6)
}

model treatment_products {
  id                              Int            @id @default(autoincrement())
  user_id                         Int
  treatment_id                    Int?
  product_name                    String         @db.VarChar(255)
  dosage                          String?        @db.VarChar(100)
  notes                           String?
  administered_date               DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  administered_by_professional_id Int?
  created_at                      DateTime?      @default(now()) @db.Timestamptz(6)
  professionals                   professionals? @relation(fields: [administered_by_professional_id], references: [id], onUpdate: NoAction, map: "fk_tp_professional")
  treatments                      treatments?    @relation(fields: [treatment_id], references: [id], onUpdate: NoAction, map: "fk_tp_treatment")
  users                           users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tp_user")
}

model user_treatments {
  id                                Int                                 @id @default(autoincrement())
  user_id                           Int
  treatment_id                      Int
  start_date                        DateTime?                           @default(dbgenerated("CURRENT_DATE")) @db.Date
  is_active                         Boolean?                            @default(true)
  created_at                        DateTime?                           @default(now()) @db.Timestamptz(6)
  treatment_area_id                 Int?
  user_treatment_photos_annotations user_treatment_photos_annotations[]
  treatment_areas                   treatment_areas?                    @relation(fields: [treatment_area_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "fk_ut_area")
  treatments                        treatments                          @relation(fields: [treatment_id], references: [id], onUpdate: NoAction, map: "fk_ut_treatment")
  users                             users                               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ut_user")

  @@unique([user_id, treatment_id])
}

model user_treatment_photos_annotations {
  id                                                                Int                    @id @default(autoincrement())
  user_id                                                           Int
  photo_url                                                         String                 @db.VarChar(512)
  photo_type                                                        String                 @db.VarChar(50)
  annotation_data                                                   String?
  user_treatment_id                                                 Int?
  professional_id                                                   Int?
  created_by_user_id                                                Int
  created_at                                                        DateTime               @default(now())
  updated_at                                                        DateTime               @default(now())
  user_treatment_photo_id                                           Int?
  user_treatment_photos                                             user_treatment_photos? @relation(fields: [user_treatment_photo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_treatment_photo")
  users_user_treatment_photos_annotations_created_by_user_idTousers users                  @relation("user_treatment_photos_annotations_created_by_user_idTousers", fields: [created_by_user_id], references: [id])
  professionals                                                     professionals?         @relation(fields: [professional_id], references: [id])
  users_user_treatment_photos_annotations_user_idTousers            users                  @relation("user_treatment_photos_annotations_user_idTousers", fields: [user_id], references: [id])
  user_treatments                                                   user_treatments?       @relation(fields: [user_treatment_id], references: [id])

  @@index([user_id])
  @@index([user_treatment_id])
}

model treatment_areas {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  user_treatments user_treatments[]
}
