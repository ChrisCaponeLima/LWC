// /server/api/users/[id].delete.ts - V1.0 - Implementa√ß√£o da rota de dele√ß√£o de usu√°rio (DELETE).
import { defineEventHandler, createError, getRouterParam, H3Event } from 'h3';
import { prisma } from '~/server/utils/db';
import { verifyToken } from '~/server/utils/auth';

// Tipo de dados esperado no token
interface AuthPayload {
 userId: number
 role: string
}

export default defineEventHandler(async (event: H3Event) => {
 if (event.method !== 'DELETE') {
  throw createError({ statusCode: 405, statusMessage: 'M√©todo n√£o permitido.' });
 }

 const userIdToDelete = Number(getRouterParam(event, 'id'));
 if (isNaN(userIdToDelete)) {
  throw createError({ statusCode: 400, statusMessage: 'ID de usu√°rio inv√°lido.' });
 }

 const token = event.headers.get('Authorization')?.split(' ')[1]

 if (!token) {
  throw createError({ statusCode: 401, statusMessage: 'N√£o autorizado. Token n√£o fornecido.' })
 }

 let payload: AuthPayload
 try {
  payload = verifyToken(token) as AuthPayload
 } catch (e) {
  throw createError({ statusCode: 401, statusMessage: 'Token inv√°lido ou expirado.' })
 }

 // üõë AUTORIZA√á√ÉO: Apenas admin ou owner podem deletar usu√°rios
 if (payload.role !== 'admin' && payload.role !== 'owner') {
  throw createError({ statusCode: 403, statusMessage: 'Acesso Proibido. Requer cargo de Administrador para deletar usu√°rios.' })
 }

 // üõë PREVEN√á√ÉO: N√£o permite que um usu√°rio se auto-delete (seguran√ßa e UX)
 if (payload.userId === userIdToDelete) {
  throw createError({ statusCode: 403, statusMessage: 'Voc√™ n√£o pode deletar sua pr√≥pria conta atrav√©s desta interface.' })
 }
 
 // üõë PREVEN√á√ÉO: Um Admin n√£o pode deletar um Owner
 if (payload.role === 'admin') {
  const userRole = await prisma.users.findUnique({
   where: { id: userIdToDelete },
   select: { role: true }
  });

  if (userRole?.role === 'owner') {
   throw createError({ statusCode: 403, statusMessage: 'Acesso Proibido. Um Administrador n√£o pode deletar um Owner.' })
  }
 }

 try {
  // Deleta o usu√°rio no DB
  await prisma.users.delete({
   where: { id: userIdToDelete },
  });

  // Retorna uma mensagem de sucesso, mas sem conte√∫do (204 No Content √© comum, mas 200/204 funciona)
  return { success: true, message: `Usu√°rio ${userIdToDelete} deletado com sucesso.` };

 } catch (error: any) {
  console.error('Erro ao deletar usu√°rio:', error);
  if (error.code === 'P2025') {
   throw createError({ statusCode: 404, statusMessage: 'Usu√°rio n√£o encontrado.' });
  }
  if (error.statusCode) throw error;
  throw createError({ statusCode: 500, statusMessage: 'Erro interno do servidor ao deletar usu√°rio.' });
 }
});