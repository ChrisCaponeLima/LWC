// /server/utils/auth.ts - V1.4 - Reintrodu√ß√£o da verifyAuthToken (Wrapper H3) ap√≥s refatora√ß√£o de JWT.

import jwt from 'jsonwebtoken';
import { H3Event, createError, getHeader } from 'h3'; // üö® Importa√ß√£o do H3Event e getHeader
import bcrypt from 'bcryptjs';

// Tipo de payload JWT
interface AuthPayload {
  userId: number;
  role: string;
}

// Chave secreta e configura√ß√µes
const JWT_SECRET = process.env.JWT_SECRET || 'fallback_secret_NAO_USAR_EM_PRODUCAO';
const SALT_ROUNDS = 10; // Custo do hash (padr√£o seguro)

// --- FUN√á√ïES BCrypt (Hash de Senhas) ---

/**
* Cria o hash da senha usando BCrypt.
*/
export async function hashPassword(password: string): Promise<string> {
  return bcrypt.hash(password, SALT_ROUNDS);
}

/**
* Verifica se a senha fornecida corresponde ao hash armazenado.
*/
export async function verifyPassword(password: string, hash: string): Promise<boolean> {
  return bcrypt.compare(password, hash); 
}

// --- FUN√á√ïES JWT (Tokens de Sess√£o) ---

/**
* Verifica e decodifica um token JWT (string pura).
* @param token O token JWT (sem o prefixo 'Bearer').
* @returns O payload decodificado.
*/
export const verifyToken = (token: string): AuthPayload => {
  try {
    const payload = jwt.verify(token, JWT_SECRET) as AuthPayload;
    return payload;
  } catch (e) {
    throw createError({ statusCode: 401, statusMessage: 'Token inv√°lido ou expirado.' });
  }
};

/**
* Cria um novo token JWT.
*/
export const signToken = (payload: AuthPayload): string => {
  return jwt.sign(
    payload,
    JWT_SECRET,
    { expiresIn: '1d' }
  );
};

// --- WRAPPER DE AUTENTICA√á√ÉO H3 (A Solu√ß√£o para o RollupError) ---

/**
 * Verifica o token JWT no cabe√ßalho 'Authorization' de um evento H3.
 * √â a fun√ß√£o de alto n√≠vel que as rotas de API devem usar.
 * @param event O evento H3 da requisi√ß√£o.
 * @returns O payload decodificado.
 * @throws 401 Unauthorized se o token for inv√°lido ou ausente.
 */
export const verifyAuthToken = (event: H3Event): AuthPayload => {
    // 1. Obter o token do cabe√ßalho Authorization
    const token = getHeader(event, 'Authorization')?.replace('Bearer ', '');

    if (!token) {
        throw createError({ statusCode: 401, statusMessage: 'Token de autentica√ß√£o ausente. Acesso negado.' });
    }
    
    // 2. Chama a fun√ß√£o de baixo n√≠vel para verifica√ß√£o
    return verifyToken(token); 
};